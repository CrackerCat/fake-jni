jvmtiError (*SetEventNotificationMode)(jvmtiEnv* env, jvmtiEventMode mode, jvmtiEvent event_type, jthread event_thread, ...);
jvmtiError (*GetAllThreads)(jvmtiEnv* env, jint* threads_count_ptr, jthread** threads_ptr);
jvmtiError (*SuspendThread)(jvmtiEnv* env, jthread thread);
jvmtiError (*ResumeThread)(jvmtiEnv* env, jthread thread);
jvmtiError (*StopThread)(jvmtiEnv* env, jthread thread, jobject exception);
jvmtiError (*InterruptThread)(jvmtiEnv* env, jthread thread);
jvmtiError (*GetThreadInfo)(jvmtiEnv* env, jthread thread, jvmtiThreadInfo* info_ptr);
jvmtiError (*GetOwnedMonitorInfo)(jvmtiEnv* env, jthread thread, jint* owned_monitor_count_ptr, jobject** owned_monitors_ptr);
jvmtiError (*GetCurrentContendedMonitor)(jvmtiEnv* env, jthread thread, jobject* monitor_ptr);
jvmtiError (*RunAgentThread)(jvmtiEnv* env, jthread thread, jvmtiStartFunction proc, const void* arg, jint priority);
jvmtiError (*GetTopThreadGroups)(jvmtiEnv* env, jint* group_count_ptr, jthreadGroup** groups_ptr);
jvmtiError (*GetThreadGroupInfo)(jvmtiEnv* env, jthreadGroup group, jvmtiThreadGroupInfo* info_ptr);
jvmtiError (*GetThreadGroupChildren)(jvmtiEnv* env, jthreadGroup group, jint* thread_count_ptr, jthread** threads_ptr, jint* group_count_ptr, jthreadGroup** groups_ptr);
jvmtiError (*GetFrameCount)(jvmtiEnv* env, jthread thread, jint* count_ptr);
jvmtiError (*GetThreadState)(jvmtiEnv* env, jthread thread, jint* thread_state_ptr);
jvmtiError (*GetCurrentThread)(jvmtiEnv* env, jthread* thread_ptr);
jvmtiError (*GetFrameLocation)(jvmtiEnv* env, jthread thread, jint depth, jmethodID* method_ptr, jlocation* location_ptr);
jvmtiError (*NotifyFramePop)(jvmtiEnv* env, jthread thread, jint depth);
jvmtiError (*GetLocalObject)(jvmtiEnv* env, jthread thread, jint depth, jint slot, jobject* value_ptr);
jvmtiError (*GetLocalInt)(jvmtiEnv* env, jthread thread, jint depth, jint slot, jint* value_ptr);
jvmtiError (*GetLocalLong)(jvmtiEnv* env, jthread thread, jint depth, jint slot, jlong* value_ptr);
jvmtiError (*GetLocalFloat)(jvmtiEnv* env, jthread thread, jint depth, jint slot, jfloat* value_ptr);
jvmtiError (*GetLocalDouble)(jvmtiEnv* env, jthread thread, jint depth, jint slot, jdouble* value_ptr);
jvmtiError (*SetLocalObject)(jvmtiEnv* env, jthread thread, jint depth, jint slot, jobject value);
jvmtiError (*SetLocalInt)(jvmtiEnv* env, jthread thread, jint depth, jint slot, jint value);
jvmtiError (*SetLocalLong)(jvmtiEnv* env, jthread thread, jint depth, jint slot, jlong value);
jvmtiError (*SetLocalFloat)(jvmtiEnv* env, jthread thread, jint depth, jint slot, jfloat value);
jvmtiError (*SetLocalDouble)(jvmtiEnv* env, jthread thread, jint depth, jint slot, jdouble value);
jvmtiError (*CreateRawMonitor)(jvmtiEnv* env, const char* name, jrawMonitorID* monitor_ptr);
jvmtiError (*DestroyRawMonitor)(jvmtiEnv* env, jrawMonitorID monitor);
jvmtiError (*RawMonitorEnter)(jvmtiEnv* env, jrawMonitorID monitor);
jvmtiError (*RawMonitorExit)(jvmtiEnv* env, jrawMonitorID monitor);
jvmtiError (*RawMonitorWait)(jvmtiEnv* env, jrawMonitorID monitor, jlong millis);
jvmtiError (*RawMonitorNotify)(jvmtiEnv* env, jrawMonitorID monitor);
jvmtiError (*RawMonitorNotifyAll)(jvmtiEnv* env, jrawMonitorID monitor);
jvmtiError (*SetBreakpoint)(jvmtiEnv* env, jmethodID method, jlocation location);
jvmtiError (*ClearBreakpoint)(jvmtiEnv* env, jmethodID method, jlocation location);
jvmtiError (*SetFieldAccessWatch)(jvmtiEnv* env, jclass klass, jfieldID field);
jvmtiError (*ClearFieldAccessWatch)(jvmtiEnv* env, jclass klass, jfieldID field);
jvmtiError (*SetFieldModificationWatch)(jvmtiEnv* env, jclass klass, jfieldID field);
jvmtiError (*ClearFieldModificationWatch)(jvmtiEnv* env, jclass klass, jfieldID field);
jvmtiError (*IsModifiableClass)(jvmtiEnv* env, jclass klass, jboolean* is_modifiable_class_ptr);
jvmtiError (*Allocate)(jvmtiEnv* env, jlong size, unsigned char** mem_ptr);
jvmtiError (*Deallocate)(jvmtiEnv* env, unsigned char* mem);
jvmtiError (*GetClassSignature)(jvmtiEnv* env, jclass klass, char** signature_ptr, char** generic_ptr);
jvmtiError (*GetClassStatus)(jvmtiEnv* env, jclass klass, jint* status_ptr);
jvmtiError (*GetSourceFileName)(jvmtiEnv* env, jclass klass, char** source_name_ptr);
jvmtiError (*GetClassModifiers)(jvmtiEnv* env, jclass klass, jint* modifiers_ptr);
jvmtiError (*GetClassMethods)(jvmtiEnv* env, jclass klass, jint* method_count_ptr, jmethodID** methods_ptr);
jvmtiError (*GetClassFields)(jvmtiEnv* env, jclass klass, jint* field_count_ptr, jfieldID** fields_ptr);
jvmtiError (*GetImplementedInterfaces)(jvmtiEnv* env, jclass klass, jint* interface_count_ptr, jclass** interfaces_ptr);
jvmtiError (*IsInterface)(jvmtiEnv* env, jclass klass, jboolean* is_interface_ptr);
jvmtiError (*IsArrayClass)(jvmtiEnv* env, jclass klass, jboolean* is_array_class_ptr);
jvmtiError (*GetClassLoader)(jvmtiEnv* env, jclass klass, jobject* classloader_ptr);
jvmtiError (*GetObjectHashCode)(jvmtiEnv* env, jobject object, jint* hash_code_ptr);
jvmtiError (*GetObjectMonitorUsage)(jvmtiEnv* env, jobject object, jvmtiMonitorUsage* info_ptr);
jvmtiError (*GetFieldName)(jvmtiEnv* env, jclass klass, jfieldID field, char** name_ptr, char** signature_ptr, char** generic_ptr);
jvmtiError (*GetFieldDeclaringClass)(jvmtiEnv* env, jclass klass, jfieldID field, jclass* declaring_class_ptr);
jvmtiError (*GetFieldModifiers)(jvmtiEnv* env, jclass klass, jfieldID field, jint* modifiers_ptr);
jvmtiError (*IsFieldSynthetic)(jvmtiEnv* env, jclass klass, jfieldID field, jboolean* is_synthetic_ptr);
jvmtiError (*GetMethodName)(jvmtiEnv* env, jmethodID method, char** name_ptr, char** signature_ptr, char** generic_ptr);
jvmtiError (*GetMethodDeclaringClass)(jvmtiEnv* env, jmethodID method, jclass* declaring_class_ptr);
jvmtiError (*GetMethodModifiers)(jvmtiEnv* env, jmethodID method, jint* modifiers_ptr);
jvmtiError (*GetMaxLocals)(jvmtiEnv* env, jmethodID method, jint* max_ptr);
jvmtiError (*GetArgumentsSize)(jvmtiEnv* env, jmethodID method, jint* size_ptr);
jvmtiError (*GetLineNumberTable)(jvmtiEnv* env, jmethodID method, jint* entry_count_ptr, jvmtiLineNumberEntry** table_ptr);
jvmtiError (*GetMethodLocation)(jvmtiEnv* env, jmethodID method, jlocation* start_location_ptr, jlocation* end_location_ptr);
jvmtiError (*GetLocalVariableTable)(jvmtiEnv* env, jmethodID method, jint* entry_count_ptr, jvmtiLocalVariableEntry** table_ptr);
jvmtiError (*SetNativeMethodPrefix)(jvmtiEnv* env, const char* prefix);
jvmtiError (*SetNativeMethodPrefixes)(jvmtiEnv* env, jint prefix_count, char** prefixes);
jvmtiError (*GetBytecodes)(jvmtiEnv* env, jmethodID method, jint* bytecode_count_ptr, unsigned char** bytecodes_ptr);
jvmtiError (*IsMethodNative)(jvmtiEnv* env, jmethodID method, jboolean* is_native_ptr);
jvmtiError (*IsMethodSynthetic)(jvmtiEnv* env, jmethodID method, jboolean* is_synthetic_ptr);
jvmtiError (*GetLoadedClasses)(jvmtiEnv* env, jint* class_count_ptr, jclass** classes_ptr);
jvmtiError (*GetClassLoaderClasses)(jvmtiEnv* env, jobject initiating_loader, jint* class_count_ptr, jclass** classes_ptr);
jvmtiError (*PopFrame)(jvmtiEnv* env, jthread thread);
jvmtiError (*ForceEarlyReturnObject)(jvmtiEnv* env, jthread thread, jobject value);
jvmtiError (*ForceEarlyReturnInt)(jvmtiEnv* env, jthread thread, jint value);
jvmtiError (*ForceEarlyReturnLong)(jvmtiEnv* env, jthread thread, jlong value);
jvmtiError (*ForceEarlyReturnFloat)(jvmtiEnv* env, jthread thread, jfloat value);
jvmtiError (*ForceEarlyReturnDouble)(jvmtiEnv* env, jthread thread, jdouble value);
jvmtiError (*ForceEarlyReturnVoid)(jvmtiEnv* env, jthread thread);
jvmtiError (*RedefineClasses)(jvmtiEnv* env, jint class_count, const jvmtiClassDefinition* class_definitions);
jvmtiError (*GetVersionNumber)(jvmtiEnv* env, jint* version_ptr);
jvmtiError (*GetCapabilities)(jvmtiEnv* env, jvmtiCapabilities* capabilities_ptr);
jvmtiError (*GetSourceDebugExtension)(jvmtiEnv* env, jclass klass, char** source_debug_extension_ptr);
jvmtiError (*IsMethodObsolete)(jvmtiEnv* env, jmethodID method, jboolean* is_obsolete_ptr);
jvmtiError (*SuspendThreadList)(jvmtiEnv* env, jint request_count, const jthread* request_list, jvmtiError* results);
jvmtiError (*ResumeThreadList)(jvmtiEnv* env, jint request_count, const jthread* request_list, jvmtiError* results);
jvmtiError (*GetAllStackTraces)(jvmtiEnv* env, jint max_frame_count, jvmtiStackInfo** stack_info_ptr, jint* thread_count_ptr);
jvmtiError (*GetThreadListStackTraces)(jvmtiEnv* env, jint thread_count, const jthread* thread_list, jint max_frame_count, jvmtiStackInfo** stack_info_ptr);
jvmtiError (*GetThreadLocalStorage)(jvmtiEnv* env, jthread thread, void** data_ptr);
jvmtiError (*SetThreadLocalStorage)(jvmtiEnv* env, jthread thread, const void* data);
jvmtiError (*GetStackTrace)(jvmtiEnv* env, jthread thread, jint start_depth, jint max_frame_count, jvmtiFrameInfo* frame_buffer, jint* count_ptr);
jvmtiError (*GetTag)(jvmtiEnv* env, jobject object, jlong* tag_ptr);
jvmtiError (*SetTag)(jvmtiEnv* env, jobject object, jlong tag);
jvmtiError (*ForceGarbageCollection)(jvmtiEnv* env);
jvmtiError (*IterateOverObjectsReachableFromObject)(jvmtiEnv* env, jobject object, jvmtiObjectReferenceCallback object_reference_callback, const void* user_data);
jvmtiError (*IterateOverReachableObjects)(jvmtiEnv* env, jvmtiHeapRootCallback heap_root_callback, jvmtiStackReferenceCallback stack_ref_callback, jvmtiObjectReferenceCallback object_ref_callback, const void* user_data);
jvmtiError (*IterateOverHeap)(jvmtiEnv* env, jvmtiHeapObjectFilter object_filter, jvmtiHeapObjectCallback heap_object_callback, const void* user_data);
jvmtiError (*IterateOverInstancesOfClass)(jvmtiEnv* env, jclass klass, jvmtiHeapObjectFilter object_filter, jvmtiHeapObjectCallback heap_object_callback, const void* user_data);
jvmtiError (*GetObjectsWithTags)(jvmtiEnv* env, jint tag_count, const jlong* tags, jint* count_ptr, jobject** object_result_ptr, jlong** tag_result_ptr);
jvmtiError (*FollowReferences)(jvmtiEnv* env, jint heap_filter, jclass klass, jobject initial_object, const jvmtiHeapCallbacks* callbacks, const void* user_data);
jvmtiError (*IterateThroughHeap)(jvmtiEnv* env, jint heap_filter, jclass klass, const jvmtiHeapCallbacks* callbacks, const void* user_data);
jvmtiError (*SetJNIFunctionTable)(jvmtiEnv* env, const jniNativeInterface* function_table);
jvmtiError (*GetJNIFunctionTable)(jvmtiEnv* env, jniNativeInterface** function_table);
jvmtiError (*SetEventCallbacks)(jvmtiEnv* env, const jvmtiEventCallbacks* callbacks, jint size_of_callbacks);
jvmtiError (*GenerateEvents)(jvmtiEnv* env, jvmtiEvent event_type);
jvmtiError (*GetExtensionFunctions)(jvmtiEnv* env, jint* extension_count_ptr, jvmtiExtensionFunctionInfo** extensions);
jvmtiError (*GetExtensionEvents)(jvmtiEnv* env, jint* extension_count_ptr, jvmtiExtensionEventInfo** extensions);
jvmtiError (*SetExtensionEventCallback)(jvmtiEnv* env, jint extension_event_index, jvmtiExtensionEvent callback);
jvmtiError (*DisposeEnvironment)(jvmtiEnv* env);
jvmtiError (*GetErrorName)(jvmtiEnv* env, jvmtiError error, char** name_ptr);
jvmtiError (*GetJLocationFormat)(jvmtiEnv* env,jvmtiJlocationFormat* format_ptr);
jvmtiError (*GetSystemProperties)(jvmtiEnv* env, jint* count_ptr, char*** property_ptr);
jvmtiError (*GetSystemProperty)(jvmtiEnv* env, const char* property, char** value_ptr);
jvmtiError (*SetSystemProperty)(jvmtiEnv* env, const char* property, const char* value);
jvmtiError (*GetPhase)(jvmtiEnv* env, jvmtiPhase* phase_ptr);
jvmtiError (*GetCurrentThreadCpuTimerInfo)(jvmtiEnv* env, jvmtiTimerInfo* info_ptr);
jvmtiError (*GetCurrentThreadCpuTime)(jvmtiEnv* env, jlong* nanos_ptr);
jvmtiError (*GetThreadCpuTimerInfo)(jvmtiEnv* env, jvmtiTimerInfo* info_ptr);
jvmtiError (*GetThreadCpuTime)(jvmtiEnv* env, jthread thread, jlong* nanos_ptr);
jvmtiError (*GetTimerInfo)(jvmtiEnv* env, jvmtiTimerInfo* info_ptr);
jvmtiError (*GetTime)(jvmtiEnv* env, jlong* nanos_ptr);
jvmtiError (*GetPotentialCapabilities)(jvmtiEnv* env, jvmtiCapabilities* capabilities_ptr);
jvmtiError (*AddCapabilities)(jvmtiEnv* env, const jvmtiCapabilities* capabilities_ptr);
jvmtiError (*RelinquishCapabilities)(jvmtiEnv* env, const jvmtiCapabilities* capabilities_ptr);
jvmtiError (*GetAvailableProcessors)(jvmtiEnv* env, jint* processor_count_ptr);
jvmtiError (*GetClassVersionNumbers)(jvmtiEnv* env, jclass klass, jint* minor_version_ptr, jint* major_version_ptr);
jvmtiError (*GetConstantPool)(jvmtiEnv* env, jclass klass, jint* constant_pool_count_ptr, jint* constant_pool_byte_count_ptr, unsigned char** constant_pool_bytes_ptr);
jvmtiError (*GetEnvironmentLocalStorage)(jvmtiEnv* env, void** data_ptr);
jvmtiError (*SetEnvironmentLocalStorage)(jvmtiEnv* env, const void* data);
jvmtiError (*AddToBootstrapClassLoaderSearch)(jvmtiEnv* env, const char* segment);
jvmtiError (*SetVerboseFlag)(jvmtiEnv* env, jvmtiVerboseFlag flag, jboolean value);
jvmtiError (*AddToSystemClassLoaderSearch)(jvmtiEnv* env, const char* segment);
jvmtiError (*RetransformClasses)(jvmtiEnv* env, jint class_count, const jclass* classes);
jvmtiError (*GetOwnedMonitorStackDepthInfo)(jvmtiEnv* env, jthread thread, jint* monitor_info_count_ptr, jvmtiMonitorStackDepthInfo** monitor_info_ptr);
jvmtiError (*GetObjectSize)(jvmtiEnv* env, jobject object, jlong* size_ptr);
jvmtiError (*GetLocalInstance)(jvmtiEnv* env, jthread thread, jint depth, jobject* value_ptr);